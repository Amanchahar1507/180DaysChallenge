#include<iostream>
using namespace std;

class Node{
    public:
    int data, height;
    Node*left, *right;

    Node(int value){
        data = value;
        left= NULL;
        right = NULL;
    }
};

int getheight(Node*root){
    if(!root) return 0;

    return root->height;
}

int getbalance(Node*root){
    return getheight(root->left) - getheight(root->right);
}

Node*rightRotation(Node*root){
    Node*child = root->left;
    Node*childRight = child->right;

    child->right = root;
    root->left = childRight;

    root->height = 1+max(getheight(root->left),getheight(root->right));
    child->height = 1+max(getheight(child->left),getheight(child->right));

    return child;
}

Node*leftRotation(Node*root){
    Node*child = root->right;
    Node*childLeft = child->left;

    child->left = root;
    root->right = childLeft;

    root->height = 1+max(getheight(root->left),getheight(root->right));
    child->height = 1 + max(getheight(child->left),getheight(child->right));

    return child;
}
Node*insert(Node*root, int key){
    if(!root){
        return new Node(key);
    }

    if(key < root->data){
        root->left = insert(root->left,key);
    }

    else if(key> root->data){
        root->right = insert(root->right,key);
    }
    else{
        return root;
    }

    root->height = 1 + max(getheight(root->left), getheight(root->right));

    int balance = getbalance(root);

    if(balance >1 && root->left->data > key){
        return rightRotation(root);
    }

    else if(balance<-1 && root->right->data < key){
        return leftRotation(root);
    }

    else if(balance > 1 && key > root->left->data){
        root->left = leftRotation(root->left);
        return rightRotation(root);
    }

    else if(balance<-1 && root->right->data > key){
        root->right = leftRotation(root->right);
        return leftRotation(root);
    }
    else{
        return root;
    }
}

void preorder(Node* root){
    if(!root) return;

    cout<< root->data <<" ";
    preorder(root->left);
    preorder(root->right);

}
int main(){
    Node*root = NULL;

    root = insert(root,10);
    root = insert(root, 30);
    root = insert(root,50);
    root = insert(root,70);
    root = insert(root,5);
    root = insert(root, 100);
    root = insert(root, 95);

    cout<<"preorder" <<endl;
    preorder(root);
}
