#include<iostream>
#include<vector>
using namespace std;

void subseq(int arr[], int index, int n, vector<int>temp, vector<vector<int>>&ans){

    if(index==n){
        ans.push_back(temp);
        return;
    }
    subseq(arr,index+1, n,temp,ans);
    temp.push_back(arr[index]);
    subseq(arr, index+1,n, temp,ans);
}
int main(){
    int arr[] = {1,2,3};
    vector<int>temp;
    vector<vector<int>>ans;

    subseq(arr,0,3,temp,ans);

    for(int i=0;i<ans.size();i++){
        for(int j=0;j<ans[i].size();j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }
}

1..........78. Subsets

class Solution {
public:

    void subseq(vector<int>&nums, int index, int n, vector<int>&temp, vector<vector<int>>&ans){

        if(index==n){
            ans.push_back(temp);
            return;
        }
        subseq(nums,index+1, n, temp, ans);
        temp.push_back(nums[index]);
        subseq(nums,index+1,n, temp, ans);
        temp.pop_back();
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>temp;
        int n =nums.size();
        subseq(nums,0,n,temp,ans);
        return ans;
    }
};

2...........22. Generate Parentheses

class Solution {
public:

    void paren(int n, int left, int right, string &temp, vector<string>&ans){
        if(left==right && left==n){
            ans.push_back(temp);
            return;
        }
        if(left<n){
            temp.push_back('(');
            paren(n,left+1,right, temp, ans);
            temp.pop_back();
        }
        if(left>right){
            temp.push_back(')');
            paren(n,left,right+1, temp,ans);
            temp.pop_back();
        }
    }
    vector<string> generateParenthesis(int n) {
        string temp;
        vector<string> ans;
        paren(n,0,0,temp,ans);
        return ans;
    }
};
