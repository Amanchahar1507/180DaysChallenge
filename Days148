//...1....SLIDING WINDOW USING QUEUE..........

#include<iostream>
#include<queue>
using namespace std;

void display(queue<int>q){
    while(!q.empty()){
        cout<<q.front()<<" ";
        q.pop();
    }
    cout<<endl;
}

int main(){
    int arr[] = {2,3,4,5,6,7,8};
    int n =7;
    int k=3;

    queue<int>q;

    for(int i=0;i<k-1;i++){
        q.push(arr[i]);
    }
    for(int i=k-1;i<n;i++){
        q.push(arr[i]);
        display(q);
        q.pop();
    }
    return 0;
}

2...............First negative integer in every window of size k

// .........METHOD 1 GIVE TLE..................

// long long display(queue<long long>q){
//     while(!q.empty()){
//         if(q.front()<0){
//             return q.front();
//         }
//         q.pop();
//     }
//     return 0;
// }

// vector<long long> printFirstNegativeInteger(long long int A[],
//                                              long long int N, long long int K) {
//         vector<long long>ans;
//         queue<long long>q;
//         for(int i=0;i<K-1;i++){
//             q.push(A[i]);
//         }
        
//         for(int i=K-1;i<N;i++){
//             q.push(A[i]);
//             ans.push_back(display(q));
//             q.pop();
//         }
//         return ans;
                                                 
//  }
 
 
 // ...............METHOD 2..............
 
 vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K){
                                                 
                                                 
        vector<long long>ans;
        queue<long long>q;
        
        for(int i=0;i<K-1;i++){
            if(A[i]<0){
                q.push(i);
            }
        }
        
        for(int i=K-1;i<N;i++){
            if(A[i]<0){
                q.push(i);
            }
            
            if(q.empty()){
                ans.push_back(0);
            }
            else{
                if(q.front()<= i-K){
                    q.pop();
                }
                
                if(q.empty()){
                    ans.push_back(0);
                }
                else{
                    ans.push_back(A[q.front()]);
                }
            }
        }
        return ans;
                                             
                                                 
}
