1............Burning Tree

class Solution {
  public:
  
    int Burn(Node*root, int &timer, int target){
        if(!root) return 0;
        
        if(root->data==target){
            return -1;
        }
        
        int left = Burn(root->left, timer,target);
        int right = Burn(root->right,timer,target);
        
        if(left<0){
            timer = max(timer, abs(left)+right);
            return left-1;
        }
        
        if(right<0){
            timer = max(timer,left + abs(right));
            return right-1;
        }
        
        return 1 + max(left,right);
    }
    
    
    
    int height(Node*root,int target, int &high){
        if(root==NULL) return 0;
        
        int h = max(height(root->left,target,high),height(root->right,target,high))+1;
        
        if(root->data == target) high = h;
        return h;
    }
  
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        
        int timer =0;
        height(root,target,timer);
        
        
        int ans = timer-1;
        Burn(root,ans,target);
        
        return  ans;
    }
};

2.............Maximum Path Sum between 2 Special Nodes


class Solution {
public:

    int path(Node*root, int &sum){
        if(!root) return 0;
        
        if(!root->left && !root->right){
            return root->data;
        }
        
        int left = path(root->left,sum);
        int right = path(root->right,sum);
        
        if(root->left && root->right){
            sum = max(sum, root->data+left+right);
            return root->data+ max(left,right);
        }
        
        if(root->left){
            return root->data + left;
        }
        
        if(root->right){
            return root->data + right;
        }
    }

    int maxPathSum(Node* root)
    {
        // code here
        int sum = INT_MIN;
        int val = path(root,sum);
        
        if(root->left && root->right){
            return sum;
        }
        return max(sum,val);
    }
};
