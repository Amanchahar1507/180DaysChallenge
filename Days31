1.   34. Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>ans(2);
        int n = nums.size();
        int s=0,e =n-1,mid;
        int left =-1;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]==target){
                left = mid;
                e = mid-1;
            }
            else if(nums[mid]>target){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }

        s=0,e=n-1;
        int right=-1;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]==target){
                right =mid;
                s = mid+1;
            }
            else if(nums[mid]>target){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        ans[0] = left;
        ans[1] = right;

        return ans;
    }
};

2.    35. Search Insert Position

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
       
        int n = nums.size();
         int ans=n;
        int s=0,e = n-1,mid;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]==target){
                ans = mid;
                break;
            }
            else if(nums[mid]>target){
                ans = mid;
                e =mid-1;
            }
            else{
                s= mid+1;
            }
        }
        return ans;
    }
};

3.  69. Sqrt(x)


class Solution {
public:
    int mySqrt(int x) {
      int s=0,e=x;
      long long mid;
      int ans=-1;
      while(s<=e){
          mid = s + (e-s)/2;
          if(mid*mid == x){
              ans=mid;
              break;
          }
          else if(mid*mid < x){
              ans = mid;
              s = mid+1;
          }
          else{
              e = mid-1;
          }
      }  
      return ans;
    }
};

4. find how many times target is present

#include<iostream>
using namespace std;

int main(){
    int n;
    cout<<"enter the numbers of arrays"<<" ";
    cin>>n;

    int arr[1000];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int target ;
    cin>>target;

    int s=0,e =n-1,mid;
    int left =-1;
    while(s<=e){
        mid = s + (e-s)/2;
        if(arr[mid]==target){
            left = mid;
            e = mid-1;
        }
        else if(arr[mid] > target){
            e = mid-1;
        }
        else{
            s = mid+1;
        }
    }

    s =0,e= n-1;
    int right = -1;
    while(s<=e){
        mid = s + (e-s)/2;
        if(arr[mid]==target){
            right = mid;
            s = mid+1;
        }
        else if(arr[mid]>target){
            e = mid-1;
        }
        else{
            s = mid+1;
        }
    }
    int ans = right-left+1;
    cout<<ans<<" ";
    
}
