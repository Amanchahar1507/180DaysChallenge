1.............Left View of Binary Tree

// ..... METHOD 1 USING QUEUE WITH SPACE..........

// vector<int> leftView(Node *root)
// {
//   // Your code here
//   vector<int>ans;
//   queue<Node*>q;
//   if(root==NULL) return ans;
//   q.push(root);
   
//   while(!q.empty()){
//       int n = q.size();
//       ans.push_back(q.front()->data);
//       while(n--){
//           Node*temp = q.front();
//           q.pop();
           
//           if(temp->left)q.push(temp->left);
//           if(temp->right) q.push(temp->right);
//       }
//   }
//   return ans;
// }

//........WITHOUT QUEUE............

void left(Node*root,int level,vector<int>&ans){
    if(root==NULL) return;
    
    if(level == ans.size()){
        ans.push_back(root->data);
        
    }
    
    left(root->left,level+1,ans);
    left(root->right,level+1,ans);
}

vector<int> leftView(Node *root){
    vector<int>ans;
    if(root==NULL) return ans;
    left(root,0,ans);
    return ans;
}

2..............Right View of Binary Tree

 // .... METHOD 1 WITH QUEUE...........
    
    // vector<int> rightView(Node *root)
    // {
    //   // Your Code here
       
    //   vector<int>ans;
    //   queue<Node*>q;
    //   if(root==NULL)return ans;
    //   q.push(root);
       
    //   while(!q.empty()){
    //       int n = q.size();
    //       ans.push_back(q.front()->data);
           
    //       while(n--){
    //           Node*temp = q.front();
    //           q.pop();
               
    //           if(temp->right) q.push(temp->right);
    //           if(temp->left) q.push(temp->left);
    //       }
    //   }
    //   return ans;
    // }
    
    //.....METHOD 2 WITHOUT QUEUE.............
    
    void right(Node*root, int level, vector<int>&ans){
        if(root==NULL) return;
        
        if(ans.size()==level) ans.push_back(root->data);
        
        right(root->right,level+1,ans);
        right(root->left,level+1,ans);
    }
    
    vector<int> rightView(Node *root){
        vector<int>ans;
        if(root==NULL) return ans;
        
        right(root,0,ans);
        return ans;
    }

3.............Top View of Binary Tree

class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    
    
    //......METHOD 1 WITH QUEUE............
    
    // void find(Node*root,int pos, int &l, int &r){
    //     if(root==NULL) return;
        
    //     l = min(l,pos);
    //     r = max(r,pos);
        
    //     find(root->left,pos-1,l,r);
    //     find(root->right,pos+1,l,r);
        
    // }
    
    // vector<int> topView(Node *root)
    // {
    //     //Your code here
    //     int l=0,r=0;
    //     find(root,0,l,r);
    //     vector<int>ans(r-l+1);
    //     vector<bool>filled(r-l+1,0);
        
    //     queue<Node*>q;
    //     queue<int>index;
        
    //     q.push(root);
    //     index.push(-1*l);
        
    //     while(!q.empty()){
    //         Node*temp = q.front();
    //         q.pop();
            
    //         int pos = index.front();
    //         index.pop();
            
    //         if(filled[pos]==0){
    //             filled[pos] =1;
    //             ans[pos] = temp->data;
    //         }
            
    //         if(temp->left){
    //             q.push(temp->left);
    //             index.push(pos-1);
    //         }
    //         if(temp->right){
    //             q.push(temp->right);
    //             index.push(pos+1);
    //         }
    //     }
    //     return ans;
    // }


    //.. .......METHOD 2 RECURSION...........
    
    void find(Node*root, int pos, int &l ,int &r){
        if(root==NULL) return;
        
        l = min(l,pos);
        r = max(r,pos);
        
        find(root->left,pos-1,l,r);
        find(root->right,pos+1,l,r);
    }
    
    void top(Node*root, int pos, vector<int>&ans, vector<int>&level, int l){
        
        if(root==NULL) return;
        
        if(level[pos] >l ){
            ans[pos] = root->data;
            level[pos] = l;
        }
        
        top(root->left,pos-1,ans,level,l+1);
        top(root->right,pos+1,ans,level,l+1);
    }
    
     vector<int> topView(Node *root){
         int l=0,r=0;
         find(root,0,l,r);
         vector<int>ans(r-l+1);
         vector<int>level(r-l+1,INT_MAX);
         
         top(root,-1*l, ans, level,0);
         return ans;
     }
};
