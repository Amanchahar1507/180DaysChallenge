1.................Floor in a Sorted Array

int findFloor(vector<long long> v, long long n, long long x){
        
        // Your code here
        
        //  LINEAR SEARCH.
        
        // int ans =-1;
        // for(long long int i=0;i<n;i++){
        //     if(v[i]==x){
        //         ans = i;
        //     }
        //     else if(v[i]<x){
        //       ans =i; 
        //     }
        //     else{
        //       break;  
        //     }
        // }
        // return ans;
        
        //BINARY SEARCH....
        
        int s =0,e = n-1;
        int mid;
        int ans =-1;
        while(s<=e){
            mid = s + (e-s)/2;
            
            if(v[mid]==x){
                return mid;
            }
            else if(v[mid] <x){
                ans = mid;
                s = mid+1;
            }
            else if(v[mid]>x){
                e =mid-1;
            }
        }
        return ans;
        
    }

2.........................Count Inversions


class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    long long int merge(long long arr[], long long n, long long int s, long long int e){
        long long int mid = s+(e-s)/2,count=0;
        long long int l1 = mid-s+1;
        long long int l2 = e-mid;
        
        long long int arr1[l1];
        long long int arr2[l2];
        
        for(int i=0;i<l1;i++){
            arr1[i] = arr[s+i];
        }
        
        for(int i=0;i<l2;i++){
            arr2[i] = arr[mid+i+1];
        }
        
        int i=0,j=0,k=s;
        
        while(i<l1 && j<l2){
            if(arr1[i]<=arr2[j]){
                arr[k++] = arr1[i++];
            }
            else{
                arr[k++] = arr2[j++];
                count += l1-i;
            }
        }
        
        while(i<l1){
            arr[k++] = arr1[i++];
        }
        
        while(j<l2){
            arr[k++] = arr2[j++];
        }
        return count;
    }
    
    long long int mergesort(long long arr[],long long n,long long int s, long long int e){
         
        long long int ans =0;
        if(s<e){
        long long int mid = s + (e-s)/2;
        
        ans += mergesort(arr,n,s,mid);
        ans += mergesort(arr,n,mid+1,e);
        ans += merge(arr,n,s,e);
        }
        return ans;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        
        // TLE.....
        
        // long long int ans=0;
        
        // for(long long int i=0;i<N-1;i++){
        //     for(long long int j=i+1;j<N;j++){
        //         if(arr[i]>arr[j]){
        //             ans++;
        //         }
        //     }
        // }
        // return ans;
        
        if(N==0) return 0;
        
        long long int s=0,e= N-1;
        
        return mergesort(arr,N,s,e);
    }

};
