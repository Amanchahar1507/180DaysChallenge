1.  Count the Zeros

class Solution{   
public:
    int countZeroes(int arr[], int n) {
        // code here
        int s=0,e= n-1,mid;
        int left=-1;
        while(s<=e){
            mid = s + (e-s)/2;
            if(arr[mid]==0){
                left = mid;
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        s=0,e= n-1;
        int right =-1;
        while(s<=e){
            mid = s + (e-s)/2;
            if(arr[mid]==0){
                right = mid;
                s = mid+1;
            }
            else{
                s =mid+1;
            }
        }
        if(left==-1) return 0;
        return right-left+1;
    }
};

2.. Number of occurrence

class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    // code here
        int s=0,e=n-1;
        int mid;
        int left=-1;
        while(s<=e){
            mid = s +(e-s)/2;
            if(arr[mid]==x){
               left = mid;
               e = mid-1;
            }
            else if(arr[mid]>x){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        
         
	    int right =-1;
        s=0,e = n-1;
        while(s<=e){
            mid = s+(e-s)/2;
            if(arr[mid] == x){
                right =mid;
                s = mid+1;
            }
            else if(arr[mid]>x){
                e= mid-1;
            }
            else{
                s =mid+1;
            }
        }
        
        if(left==-1) return 0;
        return right-left+1;
	    
	}
};

3........875. Koko Eating Bananas

class Solution {
public:
    
    bool good(int mid, vector<int> piles, int h)
    {
        int time = 0;
        for(int i=0; i<piles.size(); i++)
        {
            int temp = piles[i]/mid + (piles[i]%mid > 0 ? 1:0);
            time += temp;
        }
        return time <= h;
    }
    
    int minEatingSpeed(vector<int>& piles, int h) 
    {
        int l = 1;
        int r=piles[0];
        for(int i=1;i<piles.size();i++){
            r = max(r,piles[i]);
        }                
        while(l < r)
        {
            int mid = l + (r-l)/2;
            if(good(mid, piles, h)) r = mid;
            else l = mid+1;
        }
        return l;
    }
};

4...Split Array Largest Sum

class Solution {
  public:
    int splitArray(int arr[] ,int N, int K) {
        // code here
        int s =0,e=0,mid;
        for(int i=0;i<N;i++){
            s = max(s,arr[i]);
            e += arr[i];
        }
        int ans =0;
        while(s<=e){
            mid = s + (e-s)/2;
            
            int sub=0,num=1;
            for(int i=0;i<N;i++){
                sub += arr[i];
                if(sub>mid){
                   num++;
                   sub = arr[i];
                }
            }
            if(num<=K){
                ans = mid;
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        return ans;
    }
};
