1..........Preorder traversal (Iterative)

class Solution{
    public:
    vector<int> preOrder(Node* root)
    {
        //code here
        vector<int>ans;
        if(root==NULL) return ans;
        stack<Node*>s;
        
        s.push(root);
        
        while(!s.empty()){
            Node*temp = s.top();
            s.pop();
            
            ans.push_back(temp->data);
            
            if(temp->right) s.push(temp->right);
            if(temp->left) s.push(temp->left);
        }
        return ans;
        
    }
};

2.............Postorder Traversal (Iterative)

class Solution{
    public:
    vector<int> postOrder(Node* root) {
        // code here
            stack<Node*> s;
        vector<int> ans;
        s.push(root);
        while(!s.empty()){
            Node* temp=s.top();
            s.pop();
            ans.push_back(temp->data);
            if(temp->left)
            s.push(temp->left);
            if(temp->right)
            s.push(temp->right);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

3..........
Inorder Traversal (Iterative)

class Solution {
public:
    vector<int> inOrder(Node* root)
    {
        //code here
        vector<int>ans;
        stack<Node*>s;
        stack<bool>vis;
        
        s.push(root);
        vis.push(0);
        while(!s.empty()){
            Node*temp = s.top();
            s.pop();
            
            bool flag = vis.top();
            vis.pop();
            
            if(flag==0){
                if(temp->right){
                    s.push(temp->right);
                    vis.push(0);
                }
                s.push(temp);
                vis.push(1);
                if(temp->left){
                s.push(temp->left);
                vis.push(0);
                }
            }
            else{
                ans.push_back(temp->data);
            }
        }
        return ans;
    }
};
