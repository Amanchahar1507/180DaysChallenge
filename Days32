1..  852. Peak Index in a Mountain Array

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int n = arr.size();
        int s=0,e = n-1,mid;
        while(s<=e){
            mid = s + (e-s)/2;
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
                return mid;
            }
            else if(arr[mid]>arr[mid-1]){
                s = mid+1;
            }
            else{
                e = mid;
            }
        }
        return -1;
    }
};

2..  153. Find Minimum in Rotated Sorted Array

class Solution {
public:
    int findMin(vector<int>& nums) {
        // int n = nums.size();
        // int s =0,e = n-1,mid;
        // int ans=nums[0];
        // while(s<e){
        //     mid = s + (e-s)/2;
        //     if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]){
        //         ans = mid;
        //     }
        //     else if(nums[mid]>nums[mid-1]){
        //         s = mid+1;
        //     }
        //     else {
        //         e = mid;
        //     }
        // }
        // if(nums[mid+1]<nums[0]){
        //     return nums[mid+1];
        // }
        // else{
        //     return nums[0];
        // }

        int n = nums.size();
        int s=0,e =n-1,mid;
        int ans = nums[0];
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]>=nums[0]){
                s = mid+1;
            }
            else{
                ans = nums[mid];
                e = mid-1;
            }
        }
        return ans;
    }
};

3..  33. Search in Rotated Sorted Array

class Solution {
public:

    // int pivot(vector<int>&nums,int s,int e,int ans){
    //     int mid;
    //     while(s<=e){
    //         mid = s + (e-s)/2;
    //         if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]){
    //             ans = mid;
    //         }
    //         else if(nums[mid]>nums[mid-1]){
    //             s = mid+1;
    //         }
    //         else {
    //             e= mid;
    //         }
    //     }
    //     return ans;
    // }

    // int binary(vector<int>&nums,int s,int e,int target){
    //     int mid;
    //     int ans=-1;
    //     while(s<=e){
    //         mid = s + (e-s)/2;
    //         if(nums[mid]==target){
    //             ans = mid;
    //         }
    //         else if(nums[mid]>target){
    //             e = mid-1;
    //         }
    //         else{
    //             s = mid+1;
    //         }
    //     }
    //     return ans;
    // }

    // int search(vector<int>& nums, int target) {
    //     int n = nums.size();
    //     int s =0,e = n-1,mid;
    //     int ans =-1;
    //     pivot(nums,s,e,ans);
    //     if(target<nums[s])
    //       return binary(nums,s,ans,target);
    //     else  
    //    return binary(nums,ans+1,e,target);
    // }

    int search(vector<int>& nums, int target){
        int n = nums.size();
        int s =0,e =n-1,mid;
        int ans=-1;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid]>=nums[0]){
                if(nums[s]<=target && nums[mid]>target){
                    e = mid-1;
                }
                else{
                    s = mid+1;
                }
            }
            else{
                if(nums[mid+1]<target && nums[e]>=target){
                    s= mid+1;
                }
                else{
                    e = mid-1;
                }
            }
        }
        return -1;
    }
};
