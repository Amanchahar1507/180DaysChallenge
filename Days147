1.....Queue Reversal

class Solution
{
    public:
    queue<int> rev(queue<int> q)
    {
        // add code here.
        stack<int>st;
        
        while(!q.empty()){
            st.push(q.front());
            q.pop();
        }
        
        while(!st.empty()){
            q.push(st.top());
            st.pop();
        }
        return q;
    }
    
};

2..............Reverse First K elements of Queue

// User function Template for C++

class Solution
{
    public:
    
    // Function to reverse first k elements of a queue.
    queue<int> modifyQueue(queue<int> q, int k) {
        // add code here.
         stack<int>s;
    int i=0;
    while(i<k){
        s.push(q.front());
        q.pop();
        i++;
    }
    
    while(!s.empty()){
        q.push(s.top());
        s.pop();
    }
    int n = q.size();
    for(int i=0;i<n-k;i++){
        int ele = q.front();
        q.pop();
        q.push(ele);
    }
    return q;
    }
};

3..................2073. Time Needed to Buy Tickets

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        int time =0;
        queue<int>q;
        int n = tickets.size();
        for(int i=0;i<n;i++){
            q.push(i);
        }

        while(tickets[k]!=0){
            int index = q.front();
            q.pop();
            tickets[index] -=1;
            time++;
            if(tickets[index]!=0)q.push(index);
        }
        return time;
    }
};

4.................232. Implement Queue using Stacks

class MyQueue {
public:
    stack<int>st1;
    stack<int>st2;
    MyQueue() {
        
    }
    
    void push(int x) {
       st1.push(x); 
    }
    
    int pop() {
        if(st1.empty() && st2.empty()){
            return 0;
        }
        else if(st2.empty()){
            while(!st1.empty()){
                st2.push(st1.top());
                st1.pop();
            }
            int ele = st2.top();
        st2.pop();
        return ele;
        }
        else{
            int ele = st2.top();
        st2.pop();
        return ele;
        }
        
    }
    
    int peek() {
        if(st1.empty() && st2.empty()){
            return 0;
        }
        else if(!st2.empty()){
            return st2.top();
        }
        else{
            while(!st1.empty()){
                st2.push(st1.top());
                st1.pop();
            }
            return st2.top();
        }
    }
    
    bool empty() {
       if(st1.empty() && st2.empty()){
           return true;
       } 
       return false;
    }
};

5...........225. Implement Stack using Queues

class MyStack {
public:
    queue<int>q1;
    queue<int>q2;
    MyStack() {
        
    }
    
    void push(int x) {
        if(q1.empty() && q2.empty()){
            q1.push(x);
        }
        else if(q1.empty()){
            q2.push(x);
        }
        else{
            q1.push(x);
        }
    }
    
    int pop() {
        if(q1.empty() && q2.empty()){
            return 0;
        }
        else if(q1.empty()){
            while(q2.size()>1){
                q1.push(q2.front());
                q2.pop();
            }
            int ele = q2.front();
            q2.pop();
            return ele;
        }
        else{
            while(q1.size()>1){
                q2.push(q1.front());
                q1.pop();
            }
            int ele = q1.front();
            q1.pop();
            return ele;
        }
    }
    
    int top() {
       if(q1.empty() && q2.empty()){
           return 0;
       } 
       else if(q1.empty()){
           return q2.back();
       }
       else{
          return q1.back();
       }
    }
    
    bool empty() {
        if(q1.empty() && q2.empty()){
            return true;
        }
        return false;
    }
};

6..................
#include<iostream>
#include<queue>
using namespace std;

int main(){
    queue<int>q;
    q.push(10);
    q.push(12);
    q.push(14);
    q.push(16);
    q.push(18);
    q.push(20);

   int n = q.size();
   while(n--){
    cout<<q.front()<<endl;
    q.push(q.front());
    q.pop();
   }
    cout<<q.size()<<endl;
}
