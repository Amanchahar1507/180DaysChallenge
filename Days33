1.   Allocate minimum number of pages

class Solution 
{
    public:
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        //code here
        if(N<M) return -1;
        int count =0;
        int ans = INT_MIN;
        int sum=0;
        for(int i=0;i<N;i++){
            ans = max(ans,A[i]);
            sum += A[i];
        }
        
        int s =ans,e=sum,mid;
        int val =0;
        while(s<=e){
            mid = s + (e-s)/2;
           int pages=0,count=1;
           for(int i=0;i<N;i++){
               pages+=A[i];
               if(pages>mid){
                  count++;
                  pages = A[i];
               }  
           }
           if(count<=M){
               val = mid;
               e = mid-1;
           }
           else{
               s = mid+1;
           }
           
        }
        return val;
    }
};

2.   The Painter's Partition Problem-II

class Solution
{
  public:
    long long minTime(int arr[], int n, int k)
    {
        // code here
        // return minimum time
        long long s = 0, e =0, mid;
        
        for(int i=0;i<n;i++){
            if(s<arr[i]){
                s = arr[i];
            }
            e += arr[i];
        }
        
        long long ans =0;
        while(s<=e){
            mid = s + (e-s)/2;
            
            long long worker =1,unit=0;
            
            for(int i=0;i<n;i++){
                unit += arr[i];
                if(unit>mid){
                    worker++;
                    unit = arr[i];
                }
            }
            if(worker<=k){
                ans = mid;
                e= mid-1;
            }
            else{
                s = mid+1;
            }
        }
        return ans;
    }
};

3.  1011. Capacity To Ship Packages Within D Days

class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int s =0,e=0,mid;
        int n = weights.size();
        for(int i=0;i<n;i++){
            // if(s<weights[i]){
            //     s = weights[i];
            // }
            s = max(s,weights[i]);
            e += weights[i];
        }

        int ans =0;

        while(s<=e){
            mid = s + (e-s)/2;

            int day=1,weig =0;
            for(int i=0;i<n;i++){
                weig += weights[i];
                if(weig >mid){
                    day++;
                    weig = weights[i];
                }
            }
            if(day<=days){
                ans = mid;
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        return ans;
    }
};
