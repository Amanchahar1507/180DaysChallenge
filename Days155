1..........Level order traversal

class Solution
{
    public:
    //Function to return the level order traversal of a tree.
    vector<int> levelOrder(Node* root)
    {
      //Your code here
      vector<int>ans;
      queue<Node*>q;
      q.push(root);
      Node*temp;
      
      while(!q.empty()){
           temp = q.front();
          q.pop();
          
          ans.push_back(temp->data);
          if(temp->left)
           q.push(temp->left);
          if(temp->right)
           q.push(temp->right);
      }
      return ans;
    }
};

2..........Size of Binary Tree

//...........METHOD 1..........................

// void size(Node*root, int &count){
//     if(root==NULL) return;
    
//     count++;
//     size(root->left,count);
//     size(root->right,count);
// }

// int getSize(Node* node)
// {
//   // Your code here
//   int count=0;
//   size(node,count);
//   return count;
// }


//............METHOD2...............

int getSize(Node* node){
    if(node==NULL) return 0;
    
    return (1+ getSize(node->left) + getSize(node->right));
}

3..............Sum of Binary Tree

//............METHOD 1....................

// void traversal(Node*root, int &sum){
//     if(root==NULL){
//         return;
//     }
    
//     sum += root->key;
//     traversal(root->left,sum);
//     traversal(root->right,sum);
// }

// long int sumBT(Node* root)
// {
//     // Code here
//     int sum =0;
//     traversal(root,sum);
//     return sum;
// }


//..........METHOD2...............

long int sumBT(Node* root){
    if(root==NULL) return 0;
    
    return (root->key + sumBT(root->left) + sumBT(root->right));
}

4...............Count Leaves in Binary Tree

//.......METHOD1................

// void levels(Node*root,int &count){
//     if(root==NULL) return;
    
//     if(!root->left && !root->right){
//         count++;
//         return;
//     }
    
//     levels(root->left,count);
//     levels(root->right,count);
// }
   
// int countLeaves(Node* root)
// {
//   // Your code here
//   int count=0;
//   levels(root,count);
//   return count;
// }


//......METHOD2....................

int countLeaves(Node* root){
    if(root==NULL){
        return 0;
    }
    
    if(!root->left && !root->right){
        return 1;
    }
    
    return (countLeaves(root->left) + countLeaves(root->right));
}


5..................Count Non-Leaf Nodes in Tree

class Solution {
  public:
    int countNonLeafNodes(Node* root) {
        // Code here
        
        if(root==NULL) return 0;
        
        if(!root->left && !root->right){
            return 0;
        }
        
        return (1 + (countNonLeafNodes(root->left)) + (countNonLeafNodes(root->right)));
    }
};

6.............
Height of Binary Tree

class Solution{
    public:
    //Function to find the height of a binary tree.
    int height(struct Node* node){
        // code here 
        if(node==NULL) return 0;
        
        return 1+max(height(node->left),height(node->right));
    }
};
