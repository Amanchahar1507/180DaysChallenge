1.......876. Middle of the Linked List...........

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {

        //   1 METHOD COUNT NUMBER OF NODE................

        // int count =0;
        // ListNode*temp = head;
        // while(temp){
        //     count++;
        //     temp = temp->next;
        // }

        // int x = count/2;
        // temp =head;
        // while(x){
        //     temp = temp->next;
        //     x--;
        // }
        // return temp;

        //    2 METHOD FAST AND SLOW;

        ListNode*slow=head;
        ListNode*fast = head;

        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};

2..................206. Reverse Linked List....................

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode*reverse(ListNode*curr, ListNode*prev){
        if(curr==NULL){
            return prev;
        }

        ListNode*fut = curr->next;
        curr->next = prev;

       return  reverse(fut,curr);
    }
    ListNode* reverseList(ListNode* head) {

        // 1 REVERSE THE VALUES........................

        // vector<int>ans;
        // ListNode*temp = head;
        // while(temp!=NULL){
        //     ans.push_back(temp->val);
        //     temp = temp->next;
        // }
        // int i = ans.size()-1;
        // temp = head;
        // while(temp){
        //     temp->val = ans[i];
        //     i--;
        //     temp = temp->next;
        // }
        // return head;


        //  REVERSE A NODE..................

    //     ListNode*temp = head;
    //     ListNode*prev = NULL;
    //     ListNode*fut = NULL;

    //     while(temp){
    //         fut = temp->next;
    //         temp->next = prev;
    //         prev = temp;
    //         temp = fut;
    //     }
    //    return prev;

    // RECURSION.........................

       return reverse(head,NULL);

    }
};
