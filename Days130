Flattening a Linked List

Node*merge(Node*head1,Node*head2){
    Node*temp1 = head1;
    Node*temp2 = head2;
    Node*ans = new Node(0);
    Node*tail = ans;
    while(temp1 && temp2){
        if(temp1->data<=temp2->data){
           tail->bottom = temp1;
           temp1 = temp1->bottom;
           tail = tail->bottom;
           tail->bottom = NULL;
        }
        else{
            tail->bottom = temp2;
            temp2 = temp2->bottom;
            tail = tail->bottom;
            tail->bottom = NULL;
        }
    }
    
    if(temp1) tail->bottom = temp1;
    else tail->bottom = temp2;
    
    return ans->bottom;
}
    
Node *flatten(Node *root)
{
   // Your code here
   Node*head1;
   Node*head2;
   Node*head3;
   
   while(root->next){
       head1 = root;
       head2 = root->next;
       head3 = root->next->next;
       
       head1->next = NULL;
       head2->next = NULL;
       
       root = merge(head1,head2);
       
       root->next = head3;
   }
   
   return root;
}
