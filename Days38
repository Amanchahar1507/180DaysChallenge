 1.. Segregate 0s and 1s

class Solution{   
public:
    void segregate0and1(int arr[], int n) {
        // code here
        int s =0,e = n-1;
        while(s<e){
            if(arr[s]==0){
                s++;
            }
            else{
                if(arr[e]==0){
                    swap(arr[s],arr[e]);
                    s++;
                    e--;
                }
                else{
                    e--;
                }
            }
            
        }
    }
};


2.       167. Two Sum II - Input Array Is Sorted
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int>ans;

        int n =numbers.size();
        for(int i=0;i<n;i++){
            int sum =numbers[i];
            int s =i+1,e = n,mid;
            while(s<e){
                mid = s + (e-s)/2;
                if(numbers[mid]+sum == target){
                    ans.push_back(i+1);
                    ans.push_back(mid+1);
                    return ans;
                }
                else if(numbers[mid] +sum >target){
                    e = mid;
                }
                else if(numbers[mid]+sum < target){
                    s = mid+1;
                }
            }
        }
        return ans;

        // vector<int>ans;
        // int n = numbers.size();
        // int s =0,e=n-1;
        // while(s<e){
            
        //     if(numbers[s] + numbers[e] == target){
        //         ans.push_back(s+1);
        //         ans.push_back(e+1);
        //         return ans;
        //     }
        //     else if(numbers[s] + numbers[e] < target){
        //         s++;
        //     }
        //     else{
        //         e--;
        //     }
        // }
        // return ans;
    }
};

3.. Pair With Given Difference
int Solution::solve(vector<int> &A, int B) {
    int n = A.size();
    sort(A.begin(),A.end());
    int s =0,e =1;
    if(B<0) B = B*-1;
    while(e<n){
        if(abs(A[e]-A[s]) == B){
            return 1;
        }
        else if(A[e]-A[s] < B) e++;
        else s++;
        if(s==e) e++;
    }
    return 0;
}

4...  Remove Duplicates from Sorted Array

int Solution::removeDuplicates(vector<int> &A) {
    
    int n = A.size();
    int s =0, e= 1;
    if(n==1) return 1;
    int count =0;
    while(e<n){
        if(A[s]==A[e] && s!=e){
            e++;
        }
        else if(A[s] !=A[e] && s!=e){
            A[s+1] = A[e];
            s++;
            e++;
            count++;
        }
        
    }
    
    return count+1;
}
