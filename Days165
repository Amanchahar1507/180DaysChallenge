..............MORRIS TRAVERSAL........................


1.............Inorder Traversal (Iterative)

class Solution {
public:
    vector<int> inOrder(Node* root)
    {
        //code here
        vector<int>ans;
        
        while(root){
            
            if(root->left==NULL){
                ans.push_back(root->data);
                root = root->right;
            }
            
            else{
                Node*temp = root->left;
                while(temp->right && temp->right!=root){
                    temp = temp->right;
                }
                
                if(temp->right==NULL){
                    temp->right = root;
                    root = root->left;
                }
                else{
                    temp->right = NULL;
                    ans.push_back(root->data);
                    root = root->right;
                }
            }
        }
        return ans;
    }
};

2.........Preorder traversal (Iterative)

class Solution{
    public:
    vector<int> preOrder(Node* root)
    {
        //code here
        vector<int>ans;
        
        while(root){
            if(root->left==NULL){
                ans.push_back(root->data);
                root = root->right;
            }
            
            else{
                Node*temp = root->left;
                
                while(temp->right && temp->right!=root){
                    temp = temp->right;
                    
                }
                
                if(temp->right==NULL){
                    ans.push_back(root->data);
                    temp->right = root;
                    root = root->left;
                    
                }
                else{
                    temp->right = NULL;
                    root = root->right;
                }
            }
        }
        return ans;
    }
};

3.............Flatten binary tree to linked list

class Solution
{
    public:
    void flatten(Node *root)
    {
        //code here
        while(root){
            if(root->left==NULL){
                root = root->right;
            }
            
            else{
                Node*temp = root->left;
                
                while(temp->right){
                    temp = temp->right;
                }
                
                temp->right = root->right;
                root->right = root->left;
                root->left = NULL;
                root = root->right;
            }
        }
    }
};
