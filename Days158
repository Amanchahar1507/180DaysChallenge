1..........Determine if Two Trees are Identical

   
class Solution
{
    public:
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
        //Your Code here
        if(r1==NULL && r2== NULL) return 1;
        
        if((r1==NULL && r2!=NULL) || (r1!=NULL && r2==NULL)){
            return 0;
        }
        
        if(r1->data !=r2->data){
            return 0;
        }
        
        return (isIdentical(r1->left,r2->left) && isIdentical(r1->right,r2->right));
    }
};

2..............Mirror Tree

class Solution {
  public:
    // Function to convert a binary tree into its mirror tree.
    void mirror(Node* node) {
        // code here
        
        if(node==NULL) return;
        
        Node*temp = node->right;
        node->right = node->left;
        node->left = temp;
        
        mirror(node->left);
        
        mirror(node->right);
    }
};


3...............Check for Balanced Tree


class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    
    int height(Node*root, bool &balance){
        if(root==NULL) return 0;
        
        int left = height(root->left,balance);
        int right = height(root->right,balance);
        
        if(abs(left-right)>1) balance=0;
        
        return 1+max(left,right);
    }
    
    bool isBalanced(Node *root)
    {
        //  Your Code here
        bool balance=1;
        height(root,balance);
        return balance;
    }
};

4.........Level order traversal in spiral form

vector<int> findSpiral(Node *root)
{
    //Your code here
    
    stack<Node*>s1;
    stack<Node*>s2;
    
    vector<int>ans;
    s1.push(root);
    
    while(!s1.empty() || !s2.empty()){
    if(!s1.empty()){
        while(!s1.empty()){
            Node*temp = s1.top();
            s1.pop();
            
            ans.push_back(temp->data);
            if(temp->right){
                s2.push(temp->right);
            }
            if(temp->left){
                s2.push(temp->left);
            }
        }
    }
    else{
        while(!s2.empty()){
            Node*temp = s2.top();
            s2.pop();
            ans.push_back(temp->data);
            
            if(temp->left){
                s1.push(temp->left);
            }
            if(temp->right){
                s1.push(temp->right);
            }
        }
    }
    }
    
    return ans;
}

5..............Check if two Nodes are Cousins


bool parent(Node*root, int a, int b){
    if(root==NULL){
        return 0;
    }
    
    if(root->left && root->right){
        if(root->left->data== a && root->right->data == b){
            return 1;
        }
        if(root->left->data == b && root->right->data == a){
            return 1;
        }
    }
    
    return parent(root->left,a,b)||parent(root->right,a,b);
}

bool isCousins(Node *root, int a, int b)
{
   //add code here.
   
   queue<Node*>q;
   q.push(root);
   int l1 =-1, l2=-1;
   int level=0;
   
   while(!q.empty()){
       int n =  q.size();
       
       while(n--){
           Node*temp = q.front();
           q.pop();
           
           if(temp->data==a){
               l1 = level;
           }
           if(temp->data==b){
               l2=level;
           }
           
           if(temp->left){
               q.push(temp->left);
           }
           if(temp->right){
               q.push(temp->right);
           }
       }
       level++;
       
       if(l1!=l2){
           return 0;
       }
       
       if(l1!=-1 && l2!=-1){
           break;
       }
   }
   
   return !parent(root,a,b);
   
}
