1.........Implement two stacks in an array

#include<bits/stdc++.h>

using namespace std;


// } Driver Code Ends


class twoStacks
{
    public:
    int *arr;
    int top1,top2;
    int size;
    twoStacks(int n=100)
    {
        arr = new int[n];
        size = n;
        top1 =-1;
        top2 = n;
    }
 
    //Function to push an integer into the stack1.
    void push1(int x)
    {
        if(top1+1 == top2){
            return;
        }
        top1++;
        arr[top1] = x;
    }
    
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       if(top1+1 == top2){
           return;
       }
       top2--;
       arr[top2] = x;
    }
    
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        if(top1==-1){
            return -1;
        }
        
        int ele = arr[top1];
        top1--;
        return ele;
    }
    
    //Function to remove an element from top of the stack2.
    int pop2()
    {
       if(top2==size){
           return -1;
       }
       
       int ele = arr[top2];
       top2++;
       return ele;
    }
};

2......... N Stacks In An Array

#include <bits/stdc++.h> 
class Node{
    public:
    int index;
    Node*next;

    Node(int x){
        index = x;
        next = NULL;
    }
};

class NStack
{
public:
    // Initialize your data structure.
    stack<int>st;
    int *arr;
    Node**top;
    NStack(int N, int S)
    {
        // Write your code here.
        arr = new int[S];
        top = new Node*[N];

        for(int i=0;i<N;i++){
            top[i] = NULL;
        }

        for(int i=0;i<S;i++){
            st.push(i);
        }
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m)
    {
        // Write your code here.
        if(st.empty()){
            return 0;
        }
        arr[st.top()] = x;
        Node*temp = new Node(st.top());
        temp->next = top[m-1];
        top[m-1] = temp;
        st.pop();
        return 1;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m)
    {
        // Write your code here.
        if(top[m-1]==NULL){
            return -1;
        }

        int ele = arr[top[m-1]->index];
        st.push(top[m-1]->index);
        top[m-1] = top[m-1]->next;
        return ele;
    }
};
