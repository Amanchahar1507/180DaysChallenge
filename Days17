1. Leap Year
int isLeap(int N){
        //code here
        if(N%400==0|| (N%4==0 && N%100!=0)){
            return 1;
        }
        else return 0;
    }

2.Squares in N*N Chessboard
long long squaresInChessBoard(long long N) {
        // code here
        long sum=0;

       for(long i=N;i>0;i--)

       {

           sum=sum+i*i;

       }

     return sum;
    }

3.258. Add Digits
class Solution {
public:
    int addDigits(int num) {
       
        while(num>9){
             int ans =0;
        while(num>0){
            int rem = num%10;
            num = num/10;
            if(ans >INT_MAX || ans < INT_MIN) return 0;
            ans = ans +rem;
        }
        num = ans;
        }
        return num;
    }
};

4.7. Reverse Integer
class Solution {
public:
    int reverse(int x) {
        int ans =0;
        while(x!=0){
            int rem = x%10;
            x = x/10;
            if(ans>INT_MAX/10 || ans<INT_MIN/10) return 0;
            else
            ans = ans*10+rem;
        }
        return ans;
    }
};

5.231. Power of Two
class Solution {
public:
    bool isPowerOfTwo(int n) {
       if(n==1) return true;

       if(n%2!=0 || n==0) return false;
        while(n){
            if(n==1) return true;
            else if(n%2!=0){
                return false;
            }
            n = n/2;
        }
        return true;
      
    }
};

6. 9. Palindrome Number
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0) return false;
        int ans =0,num=x;
        while(num){
            int rem = num%10;
            num = num/10;
            if(ans>INT_MAX/10) return 0;
            ans = ans*10+rem;
        }
        
        if(x == ans){
            return true;
           
        }
        else
        return false;
    }
};

7.  1009. Complement of Base 10 Integer

class Solution {
public:
    int bitwiseComplement(int n) {
        int ans =0,mul=1;
        if(n==0) return 1;
        while(n){
            int rem = n%2;
            rem = rem^1;
            n = n/2;
            ans =ans+ rem*mul;
            mul = mul*2;
        }
        return ans;
       
    }
};

8.  69. Sqrt(x)

class Solution {
public:
    long long int squarerootint(int x){
        int s = 0;
        int e = x;
        long long int ans=-1;
        long long int mid;
        
        while(s<=e){
            mid  = s + (e-s)/2;
            long long int square = mid*mid;
            if(square==x){
                return mid;
            }
            else if(square<x){
                ans = mid;
                s = mid+1;
            }
            else{
                 e = mid -1;
               
            }
        }
        return ans;
    }
    int mySqrt(int x) {
        return squarerootint(x);        
    }
};

