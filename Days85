#include<iostream>
#include<vector>
using namespace std;


// void merge(int arr[], int start, int mid, int end){

//     vector<int>ans(end-start+1);
//     int index =0;
//     int left = start;
//     int right = mid+1;
//     while(left <=mid && right<=end){
//         if(arr[left] <=arr[right]){
//             ans[index] = arr[left];
//             index++;
//             left++;
//         }
//         else{
//             ans[index] = arr[right];
//             index++;
//             right++;
//         }
//     }

//     while(left<=mid){
//         ans[index] = arr[left];
//         index++;
//         left++;
//     }
//     while(right<=end){
//         ans[index] = arr[right];
//         index++;
//         right++;
//     }

//     index=0;
//     while(start<=end){
//         arr[start] = ans[index];
//         start++;
//         index++;
//     }
// }
// void mergeSort(int arr[], int start, int end){
//     if(start == end) return;

//     int mid = start + (end-start)/2;
//     mergeSort(arr, start, mid);
//     mergeSort(arr,mid+1,end);

//     merge(arr,start,mid,end);
// }
// int main(){
//     int arr[] = {6,3,1,2,8,9,10,7,3,10};
//     mergeSort(arr,0,9);

//     for(int i=0;i<10;i++){
//         cout<<arr[i]<<endl;
//     }
// }




void merge(int arr[], int start, int mid, int end){

    vector<int>ans(end-start+1);
    int index =0;
    int left = start;
    int right = mid+1;
    while(left <=mid && right<=end){
        if(arr[left] >=arr[right]){
            ans[index] = arr[left];
            index++;
            left++;
        }
        else{
            ans[index] = arr[right];
            index++;
            right++;
        }
    }

    while(left<=mid){
        ans[index] = arr[left];
        index++;
        left++;
    }
    while(right<=end){
        ans[index] = arr[right];
        index++;
        right++;
    }

    index=0;
    while(start<=end){
        arr[start] = ans[index];
        start++;
        index++;
    }
}
void mergeSort(int arr[], int start, int end){
    if(start == end) return;

    int mid = start + (end-start)/2;
    mergeSort(arr, start, mid);
    mergeSort(arr,mid+1,end);

    merge(arr,start,mid,end);
}
int main(){
    int arr[] = {6,3,1,2,8,9,10,7,3,10};
    mergeSort(arr,0,9);

    for(int i=0;i<10;i++){
        cout<<arr[i]<<endl;
    }
}
