1.. Ways to sum to N //tle because later solve by dp.

class Solution
{
  public:
    // function to count the total  
    // number of ways to sum up to 'N' 
    
    int way(int arr[], int n, int sum){
        if(sum==0)return 1;
        if(sum<0) return 0;
        
        long long ans=0;
        for(int i=0;i<n;i++){
            ans+=way(arr,n,sum-arr[i]);
        }
        
        return ans%1000000007;
    }
    int countWays(int arr[], int m, int N) 
    { 
      //code here.
      return way(arr,m,N);
    } 
    
};

2..........47. Permutations II

class Solution {
public:

    void perm(vector<int>&arr,vector<vector<int>>&ans,int index){
        if(index == arr.size()){
            ans.push_back(arr);
            return;
        }

        vector<bool>vis(21,0);
        for(int i=index;i<arr.size();i++){
            if(vis[arr[i]+10]==0){
                swap(arr[i],arr[index]);
                perm(arr,ans,index+1);
                swap(arr[i],arr[index]);
                vis[arr[i]+10]=1;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>>ans;
        perm(nums,ans,0);
        return ans;
    }
};







#include<iostream>
#include<vector>
using namespace std;

void perm(vector<int>arr, vector<vector<int>>&ans, int index){
    if(index==arr.size()){
        ans.push_back(arr);
        return;
    }

    vector<bool>vis(21,0);
    for(int i=index;i<arr.size();i++){
        if(vis[arr[i]+10]==0){
            swap(arr[i],arr[index]);
            perm(arr,ans,index+1);
            swap(arr[i],arr[index]);
            vis[arr[i]+10]=1;
        }
    }
}

int main(){
    vector<int>arr;
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    vector<vector<int>>ans;
    perm(arr,ans,0);
    for(int i=0;i<ans.size();i++){
        for(int j=0;j<ans[i].size();j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }
}
