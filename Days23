1748. Sum of Unique Elements

class Solution {
public:
    int sumOfUnique(vector<int>& nums) {
         int n = nums.size();
        vector<bool>ans(n,true);
       
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]==nums[j]){
                    ans[i] = false;
                    ans[j] = false;
                }
            }
        }
        int sum =0;
        for(int i=0;i<n;i++){
            if(ans[i]==true){
                sum += nums[i];
            }
        }
        return sum;
    }
};

2.First Repeating Element
class Solution {
  public:
    // Function to return the position of the first repeating element.
    int firstRepeated(int arr[], int n) {
        // code here
        unordered_map<int,int>mp;
        
        for(int i=0;i<n;i++){
            mp[arr[i]]++;
        }
        
        int ans =0;
        for(int i=0;i<n;i++){
            if(mp[arr[i]]>1){
                return i+1;
            }
        }
        return -1;
    }
};

3.Count number of elements between two given elements in array

class Solution{
    public:
    int getCount(int arr[], int n, int num1, int num2)
    {
        //Complete the function
        int ans1 =0,ans2=0,f=0;
       for(int i=0;i<n;i++){
           if(arr[i] == num1 && f==0){
               f=1;
               ans1 = i;
           }
           if(arr[i] == num2){
               ans2 = i;
           }
       }
       if(ans1 == ans2){
           return ans2 - ans1;
       }
       return ans2-ans1-1;
   }
};

4.Number of occurrence

class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    // code here
        int s=0,e=n-1;
        int mid;
        int left=-1;
        while(s<=e){
            mid = s +(e-s)/2;
            if(arr[mid]==x){
               left = mid;
               e = mid-1;
            }
            else if(arr[mid]>x){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        
         
	    int right =-1;
        s=0,e = n-1;
        while(s<=e){
            mid = s+(e-s)/2;
            if(arr[mid] == x){
                right =mid;
                s = mid+1;
            }
            else if(arr[mid]>x){
                e= mid-1;
            }
            else{
                s =mid+1;
            }
        }
        
        if(left==-1) return 0;
        return right-left+1;
	    
	}
};

5.Move all negative elements to end
class Solution{
    public:
    void segregateElements(int arr[],int n)
    {
        // Your code goes here
        int cnt1=0,cnt2=0;
        for(int i=0;i<n;i++){
            if(arr[i]>=0){
                cnt1++;
            }
            else{
                cnt2++;
            }
        }
        int neg[cnt2];
        int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]<0){
                neg[j++] = arr[i];
            }
        }
        int pos[cnt1];
        int k=0;
        for(int i=0;i<n;i++){
            if(arr[i]>=0){
                pos[k++] = arr[i];
            }
        }
        
        
        int m=0;
       
       for(int i=0;i<cnt1;i++){
           arr[m++] = pos[i];
        }
        for(int i=0;i<cnt2;i++){
            arr[m++] = neg[i];
        }
       
        
        
    }
};

