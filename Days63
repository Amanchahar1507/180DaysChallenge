1.........Minimum characters to be added at front to make string palindrome

class Solution {
public:
    int minChar(string str){
        //Write your code here
        int n = str.length();
        string rev = str;
        reverse(rev.begin(),rev.end());
        
        str+="#";
        str += rev;
        
        int m = str.size();
        vector<int>lps(m,0);
        int start =0;
        int final =1;
        while(final < m){
            if(str[start] == str[final]){
                lps[final] = start+1;
                start++;
                final++;
            }
            else{
                if(start==0){
                    final++;
                }
                else{
                    start = lps[start-1];
                }
            }
        }
        int val = lps[m-1];
        int ans = n-val;
        return ans;
    }
};

2.....686. Repeated String Match

class Solution {
public:

    void lps_find(vector<int>&lps,string s){
        int start =0,final=1;

        int n = s.size();
        while(final<n){
            if(s[start] == s[final]){
                lps[final] = start+1;
                start++;
                final++;
            }
            else{
                if(start==0){
                    final++;
                }
                else{
                    start = lps[start-1];
                }
            }
        }
    }

    int KMP_MATCH(string temp, string b){
        vector<int>lps(b.size(),0);
        lps_find(lps,b);
        int first =0,final =0;
        while(first<temp.size() && final<b.size()){
            if(temp[first] == b[final]){
                first++;
                final++;
            }
            else{
                if(final==0){
                    first++;
                }
                else{
                    final = lps[final-1];
                }
            }
        }
        if(final == b.size()) return 1;
        return 0;
    }

    int repeatedStringMatch(string a, string b) {
        if(a==b) return 1;
        string temp = a;
        int repeat =1;

        while(temp.size() < b.size()){
            temp += a;
            repeat++;
        }

        if(KMP_MATCH(temp,b)==1){
            return repeat;
        }
        if(KMP_MATCH(temp+a,b)==1){
            return repeat+1;

        }
        return -1;
    }
};
