#include<iostream>
using namespace std;


// ..................FUNCTION OVERLOADING..................

// class Area{
//     public:

//     int calculateArea(int r){
//         return 3.14*r*r;
//     }

//     int calculateArea(int l,int b){
//         return l*b;
//     }
// };

// int main(){

//     Area a1;
//     cout<<a1.calculateArea(4)<<endl;
//     cout<<a1.calculateArea(4,5);
// }


// ........OPERATOR OVERLOADING.....................

// class Complex{
//     int real,img;

//     public:
//     Complex(){

//     };

//     Complex(int real, int img){
//         this->real = real;
//         this->img = img;
//     }

//     void display(){
//         cout<<real<<" +i"<<img<<endl;
//     }

//     Complex operator +(Complex &c){
//         Complex ans;
//         ans.real =real+ c.real;
//         ans.img =img + c.img;
//         return ans;
//     }
// };

// int main(){
//     Complex c1(2,4);
//     Complex c2(4,6);

//     Complex c3 = c1+c2;
//     c3.display();
// }

// .........VIRTUAL FUNCTION.......................

class Animal{
    public:
    virtual void speak(){
        cout<<"the speak is :huhu"<<endl;

    }
};

class Dog: public Animal{

    public:
    void speak(){
        cout<<"dog is bark"<<endl;
    }
};

class cat : public Animal{
    public:
    void speak(){
        cout<<"cat is meow"<<endl;
    }
};

int main(){
    Animal *p;
    p = new Dog();
    p->speak();
}
