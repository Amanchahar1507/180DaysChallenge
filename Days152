1..........239. Sliding Window Maximum

// METHOD 1.........................

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int>dq;
        vector<int>ans;
        int n = nums.size();
        for(int i=0;i<k-1;i++){
            if(dq.empty()){
                dq.push_back(i);
            }
            else{
                while(!dq.empty() && nums[dq.back()] < nums[i]){
                    dq.pop_back();
                }
                dq.push_back(i);
            }
        }

        for(int i=k-1;i<n;i++){
            while(!dq.empty() && nums[dq.back()] <nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);

            if(dq.front() <=i-k){
                dq.pop_front();
            }

            ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};

//..........METHOD 2....................

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       int n = nums.size();
        priority_queue<pair<int,int>>pq;
        for(int i=0;i<k;i++){
            pq.push({nums[i],i});
        }
        vector<int>ans;
        ans.push_back(pq.top().first);
        for(int i=k;i<n;i++){
            pq.push({nums[i],i});
            while(pq.top().second+k<=i){
                pq.pop();
            }
            ans.push_back(pq.top().first);
        }
        return ans;
    }
};
