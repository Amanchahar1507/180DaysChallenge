1............Detect Loop in linked list.................

  // bool check(vector<Node*>&vis,Node*curr){
    //     for(int i=0;i<vis.size();i++){
    //         if(vis[i]==curr){
    //             return 1;
    //         }
    //     }
    //     return 0;
    // }
    
    bool detectLoop(Node* head)
    {
        // your code here
        
        
        // .......1.USING SPACE GIVE TLE,.........
        
        // Node*curr = head;
        // vector<Node*>vis;
        
        // while(curr){
        //     if(check(vis,curr)){
        //         return 1;
        //     }
        //     vis.push_back(curr);
        //     curr = curr->next;
        // }
        // return 0;
        
        
        //......2..USING MAP.........
        
        // Node*curr = head;
        // unordered_map<Node*,bool>vis;
        
        // while(curr){
        //     if(vis[curr]==1){
        //         return 1;
        //     }
        //     vis[curr]++;
        //     curr = curr->next;
        // }
        // return 0;
        
        
        // ......3.  without using space..........
        
        Node*slow = head;
        Node*fast = head;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(fast==slow){
                return true;
            }
        }
        return false;
    }
};

2.........Find length of Loop.............

int countNodesinLoop(struct Node *head)
{
    // Code here
    
    struct Node*slow = head;
    struct Node*fast = head;
    
    while(fast&& fast->next){
        slow = slow->next;
        fast = fast->next->next;
        
        if(slow==fast)
            break;
    }
    if(fast==NULL || fast->next==NULL){
        return 0;
    }
    int count=1;
    slow = fast->next;
    while(slow!=fast){
        count++;
        slow = slow->next;
    }
    return count;
}
