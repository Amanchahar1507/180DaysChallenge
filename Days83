#include<iostream>
using namespace std;

// bool linears(int arr[], int x, int index, int n){
//     if(index== n){
//         return 0;
//     }
//     if(arr[index] == x){
//         return 1;
//     }
//    return linears(arr,x,index+1,n);
// }
// int main(){
//     int arr[] = {2,6,3,11,4};
//     int x = 7;
//     cout<<linears(arr,x,0,5);
// }



// bool binarys(int arr[], int x, int start, int end){
//     if(start >end) return 0;
//     int mid = start +(end-start)/2;
//     if(arr[mid] == x){
//         return 1;
//     }
//     else if(arr[mid]>x){
//        return binarys(arr,x,start,mid-1);
//     }
//     else{
//         return binarys(arr,x,mid+1,end);
//     }
// }
// int main(){
//     int arr[] = {2,4,6,8,10};
//     int x = 7;
//     cout<<binarys(arr,x,0,5);
// }


//  Write a recursive function to reverse the elements of an array.

// void reverse(int arr[], int start, int end){
//     if(start > end) return;

//     int val = arr[start];
//     arr[start] = arr[end];
//     arr[end] = val;

//      reverse(arr, start+1, end-1);
// }
// int main(){
//     int arr[] = {1,2,3,4,5};
//     reverse(arr,0,5);

//     for(int i=0;i<5;i++){
//         cout<<arr[i]<<endl;
//     }
// }


//  Write a recursive function to rotate elements in an array to the right by 1 position.

void rotate(int arr[],int val1,int val2, int index, int n){
    if(index>=n){
        arr[0] = val1;
        return;
    }
    arr[index] = val1;
    val1 = val2;
    val2 = arr[index+1]; 

    rotate(arr,val1,val2,index+1,n);
}
int main(){
    int arr[] = {1,2,3,4,5};

    for(int i=0;i<5;i++){
        cout<<arr[i]<<endl;
    }
    cout<<endl;
    int val1 = arr[0];
    int val2 = arr[1];
    rotate(arr,val1, val2,1,5);

    for(int i=0;i<5;i++){
        cout<<arr[i]<<endl;
    }
}
