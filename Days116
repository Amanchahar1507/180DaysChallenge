...........linked list..............

#include<iostream>
using namespace std;

// ..........CREATING A NODE.........................

// class Node{
//     public:
//     int data;
//     Node*next;

//     Node(int data){
//         this->data = data;
//         next = NULL;
//     }
// };

// int main(){
//     Node *head;
//     head = new Node(4);

//     cout<<head->data<<endl;
//     cout<<head->next<<endl;

// }


//................INSERT A NODE IN BEGINING.............................

// class Node{
//     public:
//     int data;
//     Node*next;

//     Node(int value){
//         this->data = value;
//         next = NULL;
//     }
// };

// int main(){
//     Node*head;
//     head = NULL;

//     int arr[] ={5,2,6,3,5};

//     for(int i=0;i<5;i++){
//         if(head==NULL){
//             head = new Node(arr[i]);
//         }
//         else{
//             Node*temp = new Node(arr[i]);
//             temp->next = head;
//             head = temp;

//         }
//     }

//     Node*temp = head;
//     while(temp!=NULL){
//         cout<<temp->data<<" ";
//         temp = temp->next;
//     }
// }


// ................INSERT AT THE END...................

// class Node{
//     public:
//     int data;
//     Node*next;

//     Node(int value){
//         this->data = value;
//         next = NULL;
//     }
// };

// int main(){

    // 1..........

    // Node*head;
    // head= NULL;

    // int arr[] = {2,3,4,5,6};

    // for(int i=0;i<5;i++){
    //     if(head==NULL){
    //         head= new Node(arr[i]);
    //     }
    //     else{
    //         Node*temp =head;
    //         while(temp->next!=NULL){
    //             temp = temp->next;
    //         }
    //         Node*node = new Node(arr[i]);
    //         temp->next = node;
    //     }
    // }

    // 2.................

    // Node*head = NULL;
    // Node*tail = NULL;

    // int arr[] ={1,2,3,4,5};

    // for(int i=0;i<5;i++){
    //     if(head==NULL){
    //         head = new Node(arr[i]);
    //         tail = head;
    //     }
    //     else{
    //         tail->next = new Node(arr[i]);
    //         tail = tail->next;
    //     }
    // }
    // Node*temp = head;
    // while(temp!=NULL){
    //     cout<<temp->data<<" ";
    //     temp = temp->next;
    // }

//}
    // ...........UUSING RECURSION.................

    // Node*createLinkedList(int arr[], int index,int n){
    //     if(index == n){
    //         return NULL;
    //     }

    //     Node*temp = new Node(arr[index]);
    //     temp->next = createLinkedList(arr,index+1,n);
    //     return temp;
    // }
    // int main(){
    //     int arr[] = {1,2,3,4,5,6};
    //     Node*head = NULL;

    //     head = createLinkedList(arr,0,6);

    //     Node*temp = head;
    //     while(temp!=NULL){
    //         cout<<temp->data<<" ";
    //         temp = temp->next;
    //     }
    // }

// ..............USING RECUSION ADD AT THE BEGINNING..............

// Node*create(int arr[],int index,int n, Node*prev){
//     if(index==n){
//         return prev;
//     }
//     Node*temp = new Node(arr[index]);
//     temp->next = prev;
//     return create(arr,index+1,n,temp);
// }

// int main(){
//     Node*head = NULL;
//     Node*prev = NULL;

//     int arr[] = {2,4,6,7,8,9};

//     head = create(arr,0,6,prev);

//     Node*temp = head;
//     while(temp!=NULL){
//         cout<<temp->data<<" ";
//         temp = temp->next;
//     }
// }

// ..............INSERT AT A PARTICULAR POSITION...............................

class Node{
    public:
    int data;
    Node*next;

    Node(int value){
        this->data = value;
        next = NULL;
    }
};

 Node*createLinkedList(int arr[], int index,int n){
        if(index == n){
            return NULL;
        }

        Node*temp = new Node(arr[index]);
        temp->next = createLinkedList(arr,index+1,n);
        return temp;
    }
    int main(){
        int arr[] = {1,2,3,4,5,6};
        Node*head = NULL;

        head = createLinkedList(arr,0,6);

        int x = 3;
        int val = 30;

        Node*temp = head;
        x--;
        

        while(x--){
            temp = temp->next;
        }
        Node*temp2 = new Node(val);
        temp2->next = temp->next;
        temp->next = temp2;

        temp = head;
        while(temp!=NULL){
            cout<<temp->data<<" ";
            temp = temp->next;
        }
    }
