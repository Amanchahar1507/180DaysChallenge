1..  74. Search a 2D Matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {

        int n = matrix.size();
        int m = matrix[0].size();
        int s=0,e = m*n-1;
        while(s<=e){
            int mid = s + (e-s)/2;
            int row = mid/m;
            int col = mid%m;
            if(matrix[row][col]==target){
                return true;
            }
            else if(matrix[row][col]>target){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
    return false; 

        // int n = matrix.size();
        // int m = matrix[0].size();
        // for(int i=0;i<n;i++){
        //     if(matrix[i][0] <=target && matrix[i][m-1]>=target){
        //         int s=0,e=m-1;
        //         while(s<=e){
        //             int mid = s + (e-s)/2;
        //             if(matrix[i][mid]==target){
        //                 return true;
        //             }
        //             else if(matrix[i][mid] > target){
        //                 e = mid-1;
        //             }
        //             else{
        //                 s = mid+1;
        //             }
        //         }
        //     }
        // }
        // return false;
    }
};

2..  Search in a row-column sorted Matrix

class Solution
{
    public:
    //Function to search a given number in row-column sorted matrix.
    bool search(vector<vector<int> > matrix, int n, int m, int x) 
    {
        // code here 
        int i=0,j=m-1;
        while(i<n && j>=0){
            if(matrix[i][j]==x){
                return 1;
            }
            else if(matrix[i][j]>x){
                j--;
            }
            else{
                i++;
            }
        }
        return 0;
    }
};

3... Count zeros in a sorted matrix
class Solution{
public:
	int countZeros(vector<vector<int>>A)
	{
		//code here
		int n = A.size();
		int s=0,e = n-1;
		int cnt =0;
		while(s>=0 && e>=0 && e<n && s<n){
		    if(A[s][e]==0){
		        cnt = cnt +e+1;
		        s++;
		    }
		    else{
		        e--;
		    }
		}
		return cnt;
	}
};
