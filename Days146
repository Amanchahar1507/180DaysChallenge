#include<iostream>
using namespace std;

// class Queue{
//     int *arr;
//     int front,rear;
//     int size;

//     public:

//     Queue(int n){
//         arr = new int[n];
//         front=rear =-1;
//         size = n;
//     }

//     bool Isempty(){
//         if(front==-1){
//             return true;
//         }
//         return false;
//     }

//     bool Isfull(){
//         if(rear == size-1){
//             return true;
//         }
//         return false;
//     }

//     void push(int x){
//         if(Isempty()){
//             front = rear=0;
//             cout<<"pushed "<<x<<"into the queue"<<endl;
//             arr[0] = x;
//             return;
//         }
//         else if(Isfull()){
//             cout<<"overflow"<<endl;
//             return;
//         }

//         else{
//             cout<<"pushed "<<x<<"into the queue"<<endl;
//             rear = rear+1;
//             arr[rear] = x;
//         }
//     }

//     void pop(){
//         if(Isempty()){
//             cout<<"underflow"<<endl;
//             return;
//         }
//         else{
//             if(front==rear){
//                 cout<<"popped from the queue"<<arr[front]<<endl;
//                 front=rear =-1;
//             }
//             else{
//                 cout<<"popped from the queue"<<arr[front]<<endl;
//                 front = front +1;
//             }
//         }
//     }

//     int start(){
//         if(Isempty()){
//             cout<<"queue is empty"<<endl;
//             return -1;
//         }
//         else{
//             return arr[front];
//         }
//     }
// };

// int main(){
//     Queue q(5);
//     q.push(10);
//     q.push(20);
//     q.push(1);
//     q.push(2);
//     q.pop();
// }



// QUEUE USING CIRCULAR ARRAY.......

// class Queue{
//     int *arr;
//     int front,rear;
//     int size;

//     public:

//     Queue(int n){
//         arr = new int[n];
//         front=rear =-1;
//         size = n;
//     }

//     bool Isempty(){
//         if(front==-1){
//             return true;
//         }
//         return false;
//     }

//     bool Isfull(){
//         if((rear+1)%size == front){
//             return true;
//         }
//         return false;
//     }

//     void push(int x){
//         if(Isempty()){
//             front = rear=0;
//             cout<<"pushed "<<x<<"into the queue"<<endl;
//             arr[0] = x;
//             return;
//         }
//         else if(Isfull()){
//             cout<<"overflow"<<endl;
//             return;
//         }

//         else{
//             cout<<"pushed "<<x<<"into the queue"<<endl;
//             rear = (rear+1)%size;
//             arr[rear] = x;
//         }
//     }

//     void pop(){
//         if(Isempty()){
//             cout<<"underflow"<<endl;
//             return;
//         }
//         else{
//             if(front==rear){
//                 cout<<"popped from the queue"<<arr[front]<<endl;
//                 front=rear =-1;
//             }
//             else{
//                 cout<<"popped from the queue"<<arr[front]<<endl;
//                 front = (front +1)%size;
//             }
//         }
//     }

//     int start(){
//         if(Isempty()){
//             cout<<"queue is empty"<<endl;
//             return -1;
//         }
//         else{
//             return arr[front];
//         }
//     }
// };

// int main(){
//     Queue q(5);
//     q.push(10);
//     q.push(20);
//     q.push(1);
//     q.push(2);
//     q.pop();
//     q.push(5);
//     q.push(4);
// }


// QUEUE USING LINKED LIST......

class Node{
    public:
    int data;
    Node *next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

class Queue{
    Node *front;
    Node *rear;

    public:

    Queue(){
        front =NULL;
        rear = NULL;
    }

    bool Isempty(){
        return front==NULL;
    }

    void push(int x){
        if(Isempty()){
            cout<<"pushed"<<x<<"from the queue"<<endl;
            front=rear = new Node(x);
            return; 
        }
        else{
            cout<<"pushed"<<x<<"from the queue"<<endl;
            rear->next = new Node(x);
            rear = rear->next;
        }
    }

    void pop(){
        if(Isempty()){
            cout<<"underflow"<<endl;
            return;
        }
        else{
            cout<<"popped"<<front->data<<"from the queue"<<endl;
            Node*temp = front;
            front = front->next;
            delete temp;
        }
    }

    int start(){
        if(Isempty()){
            cout<<"queue is empty"<<endl;
            return -1;
        }
        else{
            return front->data;
        }
    }
};

int main(){
    Queue q;
    q.push(10);
    q.push(11);
    q.push(12);
    q.push(13);
    q.push(14);

}
